# handlers/admin.py
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from sqlalchemy import select

from config.settings import settings
from database.base import async_session
from database.models import Order, Service, Admin

router = Router()

# =======================
#   helpers / keyboards
# =======================

async def is_admin(user_id: int) -> bool:
    async with async_session() as session:
        res = await session.execute(select(Admin.user_id).where(Admin.user_id == user_id))
        return res.scalar_one_or_none() is not None

def admin_main_kb() -> types.ReplyKeyboardMarkup:
    return types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="üì¶ –ó–∞–∫–∞–∑—ã")],
            [types.KeyboardButton(text="‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
            [types.KeyboardButton(text="üö™ –û—Ç–º–µ–Ω–∞")],
        ],
        resize_keyboard=True
    )

def settings_kb() -> types.ReplyKeyboardMarkup:
    return types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="üí∞ –¶–µ–Ω—ã / –£—Å–ª—É–≥–∏")],
            [types.KeyboardButton(text="‚è∞ –°—Ä–æ–∫–∏"), types.KeyboardButton(text="üì¶ –î–æ—Å—Ç–∞–≤–∫–∞")],
            [types.KeyboardButton(text="üë®‚Äçüíª –ê–¥–º–∏–Ω—ã"), types.KeyboardButton(text="ü§ñ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ò–ò")],
            [types.KeyboardButton(text="üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"), types.KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
            [types.KeyboardButton(text="üìÇ –ê—Ä—Ö–∏–≤ –∑–∞–∫–∞–∑–æ–≤"), types.KeyboardButton(text="‚ö° –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")],
            [types.KeyboardButton(text="üîë API"), types.KeyboardButton(text="üîô –ù–∞–∑–∞–¥")],
        ],
        resize_keyboard=True
    )

# ---- –£—Å–ª—É–≥–∏ ----
def services_list_kb(items: list[Service]) -> types.InlineKeyboardMarkup:
    rows: list[list[types.InlineKeyboardButton]] = []
    line: list[types.InlineKeyboardButton] = []
    for svc in items:
        btn = types.InlineKeyboardButton(text=svc.name, callback_data=f"svc:open:{svc.id}")
        line.append(btn)
        if len(line) == 2:
            rows.append(line); line = []
    if line:
        rows.append(line)
    rows.append([types.InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É", callback_data="svc:add")])
    rows.append([types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="svc:back")])
    return types.InlineKeyboardMarkup(inline_keyboard=rows)

def service_card_text(s: Service) -> str:
    status = "‚úÖ –∞–∫—Ç–∏–≤–Ω–∞" if s.is_active else "‚ùå –≤—ã–∫–ª—é—á–µ–Ω–∞"
    return (
        f"‚úè <b>{s.name}</b>\n"
        f"–¶–µ–Ω–∞: <b>{s.price}</b> —Ä—É–±./{s.unit}\n"
        f"–ú–∏–Ω. —Ç–∏—Ä–∞–∂: <b>{s.min_qty}</b>\n"
        f"–°—Ç–∞—Ç—É—Å: {status}"
    )

def service_card_kb(svc_id: int, is_active: bool) -> types.InlineKeyboardMarkup:
    toggle_text = "üî¥ –í—ã–∫–ª—é—á–∏—Ç—å" if is_active else "üü¢ –í–∫–ª—é—á–∏—Ç—å"
    return types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="‚úè –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", callback_data=f"svc:ask_price:{svc_id}")],
            [types.InlineKeyboardButton(text="üî¢ –ò–∑–º–µ–Ω–∏—Ç—å –º–∏–Ω–∏–º–∞–ª–∫—É", callback_data=f"svc:ask_min:{svc_id}")],
            [types.InlineKeyboardButton(text="üìè –ï–¥–∏–Ω–∏—Ü–∞ (—à—Ç./–º/–º¬≤)", callback_data=f"svc:ask_unit:{svc_id}")],
            [types.InlineKeyboardButton(text=toggle_text, callback_data=f"svc:toggle:{svc_id}")],
            [types.InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å —É—Å–ª—É–≥—É", callback_data=f"svc:delete:{svc_id}")],
            [types.InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É —É—Å–ª—É–≥", callback_data="svc:list")],
        ]
    )

UNIT_OPTIONS = {"pcs": "—à—Ç.", "m": "–º", "m2": "–º¬≤"}

def units_kb(svc_id: int) -> types.InlineKeyboardMarkup:
    row = [
        types.InlineKeyboardButton(text=label, callback_data=f"svc:set_unit:{svc_id}:{code}")
        for code, label in UNIT_OPTIONS.items()
    ]
    return types.InlineKeyboardMarkup(
        inline_keyboard=[row, [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"svc:open:{svc_id}")]]
    )

# =======================
#          FSM
# =======================

class PriceEdit(StatesGroup):
    waiting_for_price = State()

class MinQtyEdit(StatesGroup):
    waiting_for_min = State()

class AddService(StatesGroup):
    waiting_for_name = State()
    waiting_for_price = State()
    waiting_for_unit = State()
    waiting_for_min_qty = State()

# =======================
#       /admin & menu
# =======================

@router.message(Command("admin"))
async def admin_menu(message: types.Message, state: FSMContext):
    if not await is_admin(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞."); return
    await state.clear()
    await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_main_kb())

@router.message(F.text == "üö™ –û—Ç–º–µ–Ω–∞")
async def cancel_action(message: types.Message, state: FSMContext):
    await state.clear()
    if not await is_admin(message.from_user.id): return
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω–∫—É.", reply_markup=admin_main_kb())

@router.message(F.text == "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings_menu(message: types.Message, state: FSMContext):
    if not await is_admin(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞."); return
    await state.clear()
    await message.answer("–†–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫:", reply_markup=settings_kb())

@router.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def back_to_admin(message: types.Message, state: FSMContext):
    if not await is_admin(message.from_user.id): return
    await state.clear()
    await message.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω–∫—É:", reply_markup=admin_main_kb())

# =======================
#   –°—Ä–æ–∫–∏ (cut-off)
# =======================

@router.message(F.text == "‚è∞ –°—Ä–æ–∫–∏")
async def deadlines_section(message: types.Message, state: FSMContext):
    if not await is_admin(message.from_user.id): return
    await state.set_state(DeadlinesEdit.waiting_for_deadline)
    await message.answer(
        f"üìÖ –¢–µ–∫—É—â–∏–π cut-off: {settings.workday_end_hour}:00\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è (0-23):"
    )

@router.message(DeadlinesEdit.waiting_for_deadline, F.text.regexp(r"^\d{1,2}$"))
async def deadlines_update_numeric(message: types.Message, state: FSMContext):
    hour = int(message.text)
    if not 0 <= hour <= 23:
        await message.answer("–ß–∞—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å 0-23."); return
    settings.workday_end_hour = hour
    await state.clear()
    await message.answer(f"‚úÖ Cut-off –æ–±–Ω–æ–≤–ª—ë–Ω: {hour}:00", reply_markup=settings_kb())

# =======================
#   –ó–∞–∫–∞–∑—ã
# =======================

@router.message(F.text == "üì¶ –ó–∞–∫–∞–∑—ã")
async def show_orders(message: types.Message, state: FSMContext):
    if not await is_admin(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞."); return
    await state.clear()
    async with async_session() as session:
        res = await session.execute(select(Order).order_by(Order.created_at.desc()).limit(5))
        orders = res.scalars().all()
    if not orders:
        await message.answer("üì¶ –ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç."); return
    text = "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:\n\n"
    for o in orders:
        text += f"#{o.id} ‚Äî {o.description}\n–°—Ç–∞—Ç—É—Å: {o.status}\n\n"
    await message.answer(text)

# =======================
#   –¶–µ–Ω—ã / –£—Å–ª—É–≥–∏ (root)
# =======================

@router.message(F.text == "üí∞ –¶–µ–Ω—ã / –£—Å–ª—É–≥–∏")
async def services_root(message: types.Message, state: FSMContext):
    if not await is_admin(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞."); return
    await state.clear()
    async with async_session() as session:
        res = await session.execute(select(Service).order_by(Service.id))
        items = res.scalars().all()
    if not items:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π —É—Å–ª—É–≥–∏."); return
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=services_list_kb(items))

# =======================
#   –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ò–ò (inline)
# =======================

def ai_tools_kb() -> types.InlineKeyboardMarkup:
    status = "üü¢ –í–∫–ª—é—á–µ–Ω" if settings.ai_enabled else "üî¥ –í—ã–∫–ª—é—á–µ–Ω"
    toggle_text = "–í—ã–∫–ª—é—á–∏—Ç—å" if settings.ai_enabled else "–í–∫–ª—é—á–∏—Ç—å"
    return types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text=status, callback_data="ai:noop")],
            [types.InlineKeyboardButton(text=f"üîÅ {toggle_text}", callback_data="ai:toggle")],
            [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="ai:back")]
        ]
    )

@router.message(F.text == "ü§ñ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ò–ò")
async def ai_section(message: types.Message, state: FSMContext):
    if not await is_admin(message.from_user.id): return
    await state.clear()
    await message.answer(
        f"ü§ñ –†–∞–∑–¥–µ–ª ¬´–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ò–ò¬ª\n\n–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {'–≤–∫–ª—é—á–µ–Ω ‚úÖ' if settings.ai_enabled else '–≤—ã–∫–ª—é—á–µ–Ω ‚ùå'}",
        reply_markup=ai_tools_kb()
    )

@router.callback_query(F.data == "ai:toggle")
async def ai_toggle(callback: types.CallbackQuery):
    if not await is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True); return
    settings.ai_enabled = not settings.ai_enabled
    await callback.message.edit_text(
        f"ü§ñ –†–∞–∑–¥–µ–ª ¬´–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ò–ò¬ª\n\n–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {'–≤–∫–ª—é—á–µ–Ω ‚úÖ' if settings.ai_enabled else '–≤—ã–∫–ª—é—á–µ–Ω ‚ùå'}",
        reply_markup=ai_tools_kb()
    )
    await callback.answer("–ò–∑–º–µ–Ω–µ–Ω–æ")

@router.callback_query(F.data == "ai:back")
async def ai_back(callback: types.CallbackQuery):
    if not await is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True); return
    await callback.message.answer("–†–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫:", reply_markup=settings_kb())
    await callback.answer()

@router.callback_query(F.data == "ai:noop")
async def ai_noop(callback: types.CallbackQuery):
    await callback.answer()

# =======================
#   –î—Ä—É–≥–∏–µ —Ä–∞–∑–¥–µ–ª—ã
# =======================

@router.message(F.text == "üì¶ –î–æ—Å—Ç–∞–≤–∫–∞")
async def delivery_section(message: types.Message, state: FSMContext):
    if not await is_admin(message.from_user.id): return
    await state.clear()
    await message.answer("üöö –†–∞–∑–¥–µ–ª ¬´–î–æ—Å—Ç–∞–≤–∫–∞¬ª. –ü–æ–∫–∞ –±–µ–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫.", reply_markup=settings_kb())

@router.message(F.text == "üë®‚Äçüíª –ê–¥–º–∏–Ω—ã")
async def admins_section(message: types.Message, state: FSMContext):
    if not await is_admin(message.from_user.id): return
    await state.clear()
    async with async_session() as session:
        res = await session.execute(select(Admin))
        admins = res.scalars().all()
    text = "üë®‚Äçüíª –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤:\n" + "\n".join(str(a.user_id) for a in admins)
    await message.answer(text if admins else "–ü–æ–∫–∞ –Ω–µ—Ç –∞–¥–º–∏–Ω–æ–≤.", reply_markup=settings_kb())

@router.message(F.text == "üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
async def notifications_section(message: types.Message, state: FSMContext):
    if not await is_admin(message.from_user.id): return
    await state.clear()
    settings.notify_enabled = not settings.notify_enabled
    await message.answer(
        f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'–≤–∫–ª—é—á–µ–Ω—ã ‚úÖ' if settings.notify_enabled else '–≤—ã–∫–ª—é—á–µ–Ω—ã ‚ùå'}",
        reply_markup=settings_kb()
    )

@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def stats_section(message: types.Message, state: FSMContext):
    if not await is_admin(message.from_user.id): return
    await state.clear()
    async with async_session() as session:
        total_orders = (await session.execute(select(Order))).scalars().all()
        total_services = (await session.execute(select(Service))).scalars().all()
    await message.answer(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–ó–∞–∫–∞–∑–æ–≤: {len(total_orders)}\n–£—Å–ª—É–≥: {len(total_services)}",
        reply_markup=settings_kb()
    )

@router.message(F.text == "üìÇ –ê—Ä—Ö–∏–≤ –∑–∞–∫–∞–∑–æ–≤")
async def archive_section(message: types.Message, state: FSMContext):
    if not await is_admin(message.from_user.id): return
    await state.clear()
    async with async_session() as session:
        res = await session.execute(select(Order).where(Order.status == "done").limit(5))
        items = res.scalars().all()
    if not items:
        await message.answer("üìÇ –ê—Ä—Ö–∏–≤ –ø—É—Å—Ç.", reply_markup=settings_kb()); return
    text = "üì¶ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã:\n\n"
    for o in items:
        text += f"#{o.id} ‚Äî {o.description}\n\n"
    await message.answer(text, reply_markup=settings_kb())

@router.message(F.text == "‚ö° –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
async def system_section(message: types.Message, state: FSMContext):
    if not await is_admin(message.from_user.id): return
    await state.clear()
    await message.answer(
        f"‚öô –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n"
        f"–¢–∞–π–º–∑–æ–Ω–∞: {settings.timezone}\n"
        f"Cut-off: {settings.workday_end_hour}:00\n"
        f"AI: {'on' if settings.ai_enabled else 'off'}\n"
        f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'on' if settings.notify_enabled else 'off'}",
        reply_markup=settings_kb()
    )

@router.message(F.text == "üîë API")
async def api_section(message: types.Message, state: FSMContext):
    if not await is_admin(message.from_user.id): return
    await state.clear()
    await message.answer("üîë –†–∞–∑–¥–µ–ª ¬´API¬ª. –¢—É—Ç –±—É–¥—É—Ç –∫–ª—é—á–∏/–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏.", reply_markup=settings_kb())

# =======================
#   –£—Å–ª—É–≥–∏: callbacks + FSM handlers (–¥–æ–±–∞–≤–ª–µ–Ω–æ)
# =======================

from sqlalchemy import select
from aiogram.exceptions import TelegramBadRequest

# –°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ (–æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ inline-–∫–Ω–æ–ø–∫–µ)
@router.callback_query(F.data == "svc:list")
async def svc_list(callback: types.CallbackQuery, state: FSMContext):
    if not await is_admin(callback.from_user.id):
        return await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
    await state.clear()
    async with async_session() as session:
        res = await session.execute(select(Service).order_by(Service.id))
        items = res.scalars().all()
    if not items:
        try:
            await callback.message.edit_text("–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π —É—Å–ª—É–≥–∏.")
        except TelegramBadRequest:
            await callback.message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π —É—Å–ª—É–≥–∏.")
        return await callback.answer()
    try:
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=services_list_kb(items))
    except TelegramBadRequest:
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=services_list_kb(items))
    await callback.answer()

# –ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
@router.callback_query(F.data == "svc:back")
async def svc_back(callback: types.CallbackQuery, state: FSMContext):
    if not await is_admin(callback.from_user.id):
        return await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
    await state.clear()
    await callback.message.edit_text("–†–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫:")
    await callback.message.answer("–†–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫:", reply_markup=settings_kb())
    await callback.answer()

# –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É —É—Å–ª—É–≥–∏
@router.callback_query(F.data.startswith("svc:open:"))
async def svc_open(callback: types.CallbackQuery, state: FSMContext):
    if not await is_admin(callback.from_user.id):
        return await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
    await state.clear()
    svc_id = int(callback.data.split(":")[2])
    async with async_session() as session:
        svc = await session.get(Service, svc_id)
        if not svc:
            await callback.answer("–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True); return
        text = service_card_text(svc)
    await callback.message.edit_text(text, reply_markup=service_card_kb(svc_id, svc.is_active), parse_mode="HTML")
    await callback.answer()

# –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
@router.callback_query(F.data.startswith("svc:ask_price:"))
async def svc_ask_price(callback: types.CallbackQuery, state: FSMContext):
    if not await is_admin(callback.from_user.id):
        return await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
    svc_id = int(callback.data.split(":")[2])
    await state.set_state(PriceEdit.waiting_for_price)
    await state.update_data(svc_id=svc_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ, –º–æ–∂–Ω–æ —Å —Ç–æ—á–∫–æ–π):")
    await callback.answer()

# –ü—Ä–∏–Ω—è—Ç—å –Ω–æ–≤—É—é —Ü–µ–Ω—É
@router.message(PriceEdit.waiting_for_price)
async def svc_set_price(message: types.Message, state: FSMContext):
    if not await is_admin(message.from_user.id):
        return
    raw = (message.text or "").replace(",", ".").strip()
    try:
        price = float(raw)
        if price < 0:
            raise ValueError
    except ValueError:
        return await message.answer("‚õî –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12.5)")
    data = await state.get_data()
    svc_id = data.get("svc_id")
    async with async_session() as session:
        svc = await session.get(Service, svc_id)
        if not svc:
            await state.clear()
            return await message.answer("–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        svc.price = price
        await session.commit()
        text = service_card_text(svc)
    await state.clear()
    await message.answer(f"‚úÖ –¶–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {price}")
    await message.answer(text, reply_markup=service_card_kb(svc_id, svc.is_active), parse_mode="HTML")

# –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ç–∏—Ä–∞–∂–∞
@router.callback_query(F.data.startswith("svc:ask_min:"))
async def svc_ask_min(callback: types.CallbackQuery, state: FSMContext):
    if not await is_admin(callback.from_user.id):
        return await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
    svc_id = int(callback.data.split(":")[2])
    await state.set_state(MinQtyEdit.waiting_for_min)
    await state.update_data(svc_id=svc_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –º–∏–Ω–∏–º—É–º (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ >= 1):")
    await callback.answer()

# –ü—Ä–∏–Ω—è—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–∏—Ä–∞–∂
@router.message(MinQtyEdit.waiting_for_min)
async def svc_set_min(message: types.Message, state: FSMContext):
    if not await is_admin(message.from_user.id):
        return
    try:
        min_qty = int(message.text.strip())
        if min_qty < 1:
            raise ValueError
    except ValueError:
        return await message.answer("‚õî –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ >= 1")
    data = await state.get_data()
    svc_id = data.get("svc_id")
    async with async_session() as session:
        svc = await session.get(Service, svc_id)
        if not svc:
            await state.clear()
            return await message.answer("–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        svc.min_qty = min_qty
        await session.commit()
        text = service_card_text(svc)
    await state.clear()
    await message.answer(f"‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–∏—Ä–∞–∂ –æ–±–Ω–æ–≤–ª—ë–Ω: {min_qty}")
    await message.answer(text, reply_markup=service_card_kb(svc_id, svc.is_active), parse_mode="HTML")

# –ó–∞–ø—Ä–æ—Å–∏—Ç—å –≤—ã–±–æ—Ä –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
@router.callback_query(F.data.startswith("svc:ask_unit:"))
async def svc_ask_unit(callback: types.CallbackQuery, state: FSMContext):
    if not await is_admin(callback.from_user.id):
        return await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
    svc_id = int(callback.data.split(":")[2])
    await state.update_data(svc_id=svc_id)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è:", reply_markup=units_kb(svc_id))
    await callback.answer()

# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–¥–∏–Ω–∏—Ü—É
@router.callback_query(F.data.startswith("svc:set_unit:"))
async def svc_set_unit(callback: types.CallbackQuery, state: FSMContext):
    if not await is_admin(callback.from_user.id):
        return await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
    _, _, svc_id_str, code = callback.data.split(":")
    svc_id = int(svc_id_str)
    label = UNIT_OPTIONS.get(code)
    if not label:
        return await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –µ–¥–∏–Ω–∏—Ü–∞", show_alert=True)
    async with async_session() as session:
        svc = await session.get(Service, svc_id)
        if not svc:
            return await callback.answer("–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        svc.unit = label
        await session.commit()
        text = service_card_text(svc)
    await callback.message.edit_text(text, reply_markup=service_card_kb(svc_id, svc.is_active), parse_mode="HTML")
    await callback.answer("–û–±–Ω–æ–≤–ª–µ–Ω–æ")

# –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
@router.callback_query(F.data.startswith("svc:toggle:"))
async def svc_toggle(callback: types.CallbackQuery, state: FSMContext):
    if not await is_admin(callback.from_user.id):
        return await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
    svc_id = int(callback.data.split(":")[2])
    async with async_session() as session:
        svc = await session.get(Service, svc_id)
        if not svc:
            return await callback.answer("–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        svc.is_active = not svc.is_active
        await session.commit()
        text = service_card_text(svc)
    await callback.message.edit_text(text, reply_markup=service_card_kb(svc_id, svc.is_active), parse_mode="HTML")
    await callback.answer("–ò–∑–º–µ–Ω–µ–Ω–æ")

# –£–¥–∞–ª–∏—Ç—å —É—Å–ª—É–≥—É
@router.callback_query(F.data.startswith("svc:delete:"))
async def svc_delete(callback: types.CallbackQuery, state: FSMContext):
    if not await is_admin(callback.from_user.id):
        return await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
    svc_id = int(callback.data.split(":")[2])
    async with async_session() as session:
        svc = await session.get(Service, svc_id)
        if not svc:
            return await callback.answer("–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        await session.delete(svc)
        await session.commit()
        res = await session.execute(select(Service).order_by(Service.id))
        items = res.scalars().all()
    if not items:
        await callback.message.edit_text("–£—Å–ª—É–≥–∞ —É–¥–∞–ª–µ–Ω–∞. –ë–æ–ª—å—à–µ —É—Å–ª—É–≥ –Ω–µ—Ç.")
        return await callback.answer("–£–¥–∞–ª–µ–Ω–æ")
    await callback.message.edit_text("–£—Å–ª—É–≥–∞ —É–¥–∞–ª–µ–Ω–∞. –°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥:", reply_markup=services_list_kb(items))
    await callback.answer("–£–¥–∞–ª–µ–Ω–æ")

# –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É
@router.callback_query(F.data == "svc:add")
async def add_service_start(callback: types.CallbackQuery, state: FSMContext):
    if not await is_admin(callback.from_user.id):
        return await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
    await state.set_state(AddService.waiting_for_name)
    await state.update_data(new_service={})
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —É—Å–ª—É–≥–∏:")
    await callback.answer()

@router.message(AddService.waiting_for_name)
async def add_service_name(message: types.Message, state: FSMContext):
    if not await is_admin(message.from_user.id):
        return
    name = message.text.strip()
    if len(name) < 2:
        return await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
    data = await state.get_data()
    new = data.get("new_service", {{}})
    new["name"] = name
    await state.update_data(new_service={"name": message.text.strip()})
    await state.set_state(AddService.waiting_for_price)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12.5):")
    
@router.message(AddService.waiting_for_price)
async def add_service_price(message: types.Message, state: FSMContext):
    try:
        price = float(message.text.strip().replace(",", "."))
    except ValueError:
        return await message.answer("‚õî –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12.5).")

    data = await state.get_data()
    new = data.get("new_service", {})
    new["price"] = price
    await state.update_data(new_service=new)
    await state.set_state(AddService.waiting_for_unit)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è (—à—Ç., –º, –º¬≤):")
    
@router.message(AddService.waiting_for_unit)
async def add_service_unit(message: types.Message, state: FSMContext):
    unit = message.text.strip().lower()
    allowed = {"—à—Ç.", "—à—Ç", "–º", "–º¬≤", "–º2"}
    if unit not in allowed:
        return await message.answer("‚õî –î–æ–ø—É—Å—Ç–∏–º—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: —à—Ç., –º, –º¬≤")

    unit_norm = "—à—Ç." if unit.startswith("—à—Ç") else ("–º¬≤" if unit in {"–º¬≤", "–º2"} else "–º")

    data = await state.get_data()
    new = data.get("new_service", {})
    new["unit"] = unit_norm
    await state.update_data(new_service=new)
    await state.set_state(AddService.waiting_for_min_qty)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):")

@router.message(AddService.waiting_for_min_qty)
async def add_service_min_qty(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        return await message.answer("‚õî –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")

    min_qty = int(message.text)
    data = await state.get_data()
    new = data.get("new_service", {})

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    from database.models import Service
    from database import async_session
    async with async_session() as session:
        service = Service(
            name=new["name"],
            price=new["price"],
            unit=new["unit"],
            min_qty=min_qty,
        )
        session.add(service)
        await session.commit()

    await state.clear()
    await message.answer(f"‚úÖ –£—Å–ª—É–≥–∞ <b>{new['name']}</b> –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    await message.answer("–°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥:", reply_markup=services_list_kb(items))

