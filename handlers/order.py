from aiogram import Router, F
from aiogram.types import Message
from database.db import SessionLocal
from database.models import Order

router = Router(name="order")

@router.message(F.text == "üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑")
async def order_start(message: Message):
    await message.answer("–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–µ—á–∞—Ç–∞—Ç—å (–æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º):")

# –õ—é–±–æ–π –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç (–Ω–µ –∫–æ–º–∞–Ω–¥–∞ –∏ –Ω–µ –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é) —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∑–∞–∫–∞–∑–æ–º
@router.message(F.text & ~F.text.startswith("/") & (F.text != "üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑") & (F.text != "üì¶ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞") & (F.text != "üõ† –ê–¥–º–∏–Ω–∫–∞"))
async def capture_description(message: Message):
    desc = message.text.strip()
    if not desc:
        return
    async with SessionLocal() as session:
        order = Order(user_id=message.from_user.id, description=desc, status="new")
        session.add(order)
        await session.commit()
        await session.refresh(order)
    await message.answer(f"‚úÖ –ó–∞–∫–∞–∑ #{order.id} —Å–æ–∑–¥–∞–Ω. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —á–∞—Ç–µ.")
